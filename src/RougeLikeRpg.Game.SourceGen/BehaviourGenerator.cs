using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace RougeLikeRpg.SourceGen
{
    [AttributeUsage(AttributeTargets.Class)]
    public class BehaviourAttribute: Attribute {}

    [Generator]
    public class BehaviourGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var compilation = context.Compilation;
            var binExpression =
                   compilation
                    .GetTypeByMetadataName("RougeLikeRpg.SourceGen.BehaviourAttribute");
            foreach (var syntaxTree in compilation.SyntaxTrees)
            {
                var semanticModel = compilation.GetSemanticModel(syntaxTree);
                var targetTypes =
                        syntaxTree
                        .GetRoot()
                        .DescendantNodesAndSelf()
                        .OfType<ClassDeclarationSyntax>()
                        .Select(x => semanticModel.GetDeclaredSymbol(x))
                        .OfType<ITypeSymbol>()
                        .Where(x =>
                                x.GetAttributes()
                                .FirstOrDefault(a => a.AttributeClass?.Name == nameof(BehaviourAttribute)) != null)
                        .ToImmutableHashSet(SymbolEqualityComparer.Default);

                foreach (var t in targetTypes.OfType<INamedTypeSymbol>())
                {
                    var behaviourSource = ProcessBehaviour(t);
                    context.AddSource($"{t.Name}.g.cs", behaviourSource);
                }
            }
        }

        private string ProcessBehaviour(INamedTypeSymbol behaviour)
        {
            string namespaceName = behaviour.ContainingNamespace.ToDisplayString();
            StringBuilder source = new(@$"//<auto-generated>
namespace {namespaceName};
public pratial class {behaviour.Name} : EntityBehaviour
{{
    public {behaviour.Name}(Entity e): base(e){{}}
}}
");
            return source.ToString();
        }
    }
}

